.TH "Print" 3 "Libft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Print \- Print functions
.PP
 \- Print functions\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "ssize_t \fBft_putchar_fd\fP (const char c, int fd)"
.br
.RI "Print the character 'c' on the file descriptor\&. "
.ti -1c
.RI "ssize_t \fBft_putstr_fd\fP (const char *s, int fd)"
.br
.RI "Print the string 's' on the file descriptor\&. "
.ti -1c
.RI "ssize_t \fBft_putnstr_fd\fP (const char *s, size_t len, int fd)"
.br
.RI "Print the string 's' on the file descriptor until a given size or the length of s if len is greater\&. "
.ti -1c
.RI "ssize_t \fBft_putendl_fd\fP (const char *s, int fd)"
.br
.RI "Print the string 's' on the file descriptor, followed by a newline\&. "
.ti -1c
.RI "ssize_t \fBft_putnendl_fd\fP (const char *s, size_t len, int fd)"
.br
.RI "Print the string 's' on the file descriptor, followed by a newline until a given size or the length of s if len is greater\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_fd\fP (long long n, int fd)"
.br
.RI "Write the int 'n' on the given file descriptor\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_bin\fP (int nbr)"
.br
.RI "Putnbr for binary\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_oct\fP (int nbr)"
.br
.RI "Putnbr for octal\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_hex\fP (int nbr, char height)"
.br
.RI "Putnbr for hex or HEX\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_hex_fd\fP (unsigned int nbr, char height, int fd)"
.br
.RI "Putnbr for hex or HEX\&. "
.ti -1c
.RI "ssize_t \fBft_putptr_fd\fP (unsigned long nbr, int fd)"
.br
.RI "Print pointer adress\&. "
.ti -1c
.RI "ssize_t \fBft_putnbr_base\fP (int nbr, const char *base)"
.br
.RI "Putnbr with a particular base\&. "
.ti -1c
.RI "size_t \fBft_check_base_atoi\fP (const char *base)"
.br
.RI "Check if base is valid for atoi_base\&. "
.ti -1c
.RI "size_t \fBft_check_base_putnbr\fP (const char *base)"
.br
.RI "Check if base is valid for putnbr_base\&. "
.ti -1c
.RI "ssize_t \fBft_putpointer_fd\fP (const void *ptr)"
.br
.RI "Print pointer adress\&. "
.in -1c
.SH "Detailed Description"
.PP 
Print functions\&. 


.SH "Function Documentation"
.PP 
.SS "size_t ft_check_base_atoi (const char * base)"

.PP
Check if base is valid for atoi_base\&. 
.PP
\fBParameters\fP
.RS 4
\fIbase\fP base to check 
.RE
.PP
\fBReturns\fP
.RS 4
int 1 if valid, 0 if not 
.RE
.PP

.SS "size_t ft_check_base_putnbr (const char * base)"

.PP
Check if base is valid for putnbr_base\&. 
.PP
\fBParameters\fP
.RS 4
\fIbase\fP base to check 
.RE
.PP
\fBReturns\fP
.RS 4
int 1 if valid, 0 if not 
.RE
.PP

.SS "ssize_t ft_putchar_fd (const char c, int fd)"

.PP
Print the character 'c' on the file descriptor\&. 
.PP
\fBParameters\fP
.RS 4
\fIc\fP character to print 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putendl_fd (const char * s, int fd)"

.PP
Print the string 's' on the file descriptor, followed by a newline\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP string to print 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putnbr_base (int nbr, const char * base)"

.PP
Putnbr with a particular base\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP number to print 
.br
\fIbase\fP base to use 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putnbr_bin (int nbr)"

.PP
Putnbr for binary\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP number to print 
.RE
.PP

.SS "ssize_t ft_putnbr_fd (long long n, int fd)"

.PP
Write the int 'n' on the given file descriptor\&. 
.PP
\fBParameters\fP
.RS 4
\fIn\fP number to print 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putnbr_hex (int nbr, char height)"

.PP
Putnbr for hex or HEX\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP number to print 
.br
\fIheight\fP 1 for hex, 0 for HEX 
.RE
.PP

.SS "ssize_t ft_putnbr_hex_fd (unsigned int nbr, char height, int fd)"

.PP
Putnbr for hex or HEX\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP number to print 
.br
\fIheight\fP 1 for hex, 0 for HEX 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putnbr_oct (int nbr)"

.PP
Putnbr for octal\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP number to print 
.RE
.PP

.SS "ssize_t ft_putnendl_fd (const char * s, size_t len, int fd)"

.PP
Print the string 's' on the file descriptor, followed by a newline until a given size or the length of s if len is greater\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP string to print 
.br
\fIlen\fP maximum char to be printed 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t nombre de caractere qui ont été écrits 
.RE
.PP

.SS "ssize_t ft_putnstr_fd (const char * s, size_t len, int fd)"

.PP
Print the string 's' on the file descriptor until a given size or the length of s if len is greater\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP string to print 
.br
\fIlen\fP maximum char to be printed 
.br
\fIfd\fP nombre de caractere qui ont été écrits 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t nombre de caractere qui ont été écrits 
.RE
.PP

.SS "ssize_t ft_putpointer_fd (const void * ptr)"

.PP
Print pointer adress\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP pointer to print 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putptr_fd (unsigned long nbr, int fd)"

.PP
Print pointer adress\&. 
.PP
\fBParameters\fP
.RS 4
\fInbr\fP Number to be printed 
.br
\fIfd\fP File descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t number of char printed 
.RE
.PP

.SS "ssize_t ft_putstr_fd (const char * s, int fd)"

.PP
Print the string 's' on the file descriptor\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP string to print 
.br
\fIfd\fP file descriptor 
.RE
.PP
\fBReturns\fP
.RS 4
ssize_t nombre de caractere qui ont été écrits 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Libft from the source code\&.
